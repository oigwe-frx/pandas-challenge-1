# -*- coding: utf-8 -*-
"""module_4_challenge.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1rjGMt__AJCXzFTBaKEFydwrds8wgAfk2

## **Context**

### Objective

In this challenge, we'll dive into a dataset from a fictional e-commerce company, exploring and analyzing data to address real-world business questions. Your mission will involve identifying top customers, popular product categories, calculating profits, and more. By the end of this task, you'll have a practical understanding of data exploration, transformation, and analysis, preparing you for more complex data scenarios in your future career.

### Data Description

The data contains the different data related to a e-commerce platform order system. The detailed data dictionary is given below.

### Data Dictionary

* first: First name of the customer who placed the order
* last: Last name of the customer who placed the order
* job: Occupation of the customer who placed the order
* phone: Phone number of the customer who placed the order
* email: Email address of the customer who placed the order
* client_id: Unique ID of the client
* order_id: Unique ID of the order
* order_date: Indicates the date that the order was placed
* order_week: Indicates the week number that the order was placed. Weeks are labeled 1-52
* order_year: Indicates the year that the order was placed
* item_id: Unique ID of an item
* category: A broad grouping (parent) used to classify items.
* subcategory: A more specific specific grouping within the parent category
* unit_price: Price listed for an individual item
* unit_cost: Cost incurred by the business
* unit_weight: Weight of an individual item
* qty:  Amount of the item purchased

###<b> Mount the Drive
"""

from google.colab import drive
drive.mount('/content/drive')

"""### <b> Load Libraries"""

# Libraries for performing numerical computations
import pandas as pd

"""### <b> Load Data

"""

# Load Data
file = '/content/drive/MyDrive/Starter_Code/Resources/client_dataset.csv'
df = pd.read_csv(file)

# returns the first 5 rows of the data table
df.head()

"""### <b> Part 1: Data Exploration

#### How many rows and columns are present in the data?
"""

print("The sample size for this problem is:", " - {} rows, and {} columns".format(df.shape[0], df.shape[1]))

"""#### What are the datatypes of the different columns in the dataset?"""

# Presentation of the datatypes located with the dataset

df.info()

"""**Initial Observation**:
The present datatypes are: float64(3), int64(6), object(9).

In the preliminary review of the dataset, it has been observed that the data types assigned to each column are appropriately aligned with the expectations set by their respective column names. This initial assessment suggests a logical and coherent structure of the dataset, which is indicative of a well-organized and thoughtfully curated data schema. This alignment between column names and data types provides a solid foundation for the subsequent stages of data analysis.

#### Check the statistical summary of the data.
"""

# Descriptive Statistics of the dataset

df.describe()

"""#### What three item categories had the most entries?"""

# Top 3 Item Categories

category_counts = (df['category'].value_counts())[0:3]

print("Top 3 Item Categories")
print(category_counts)

"""#### For the category with the most entries, which subcategory had the most entries?

"""

# Top Subcategory
sub_category_counts = df['subcategory'].value_counts()[:1]

print("Top Sub-Category")
print(sub_category_counts)

"""#### Which five clients had the most entries in the data?

Store the client ids of those top 5 clients in a list.
"""

# Extracting the top 5 clients by purchase quantity
top_five_clients = df['client_id'].value_counts()[:5]

print("Top 5 Client IDs and Their Order Total")
print(top_five_clients)

# Extract the client IDs from the index of the Series
top_five_client_ids = top_five_clients.index.tolist()

# Print the client IDs
print("Top 5 Client IDs")
print(top_five_client_ids)

"""#### How many total units (the qty column) did the client with the most entries order?"""

# Top Client ID
top_client = top_five_client_ids[0]

# Extract all of the orders placed by the top client
top_client_orders = df[df['client_id'] == top_client]

# Total number of orders placed by the top client
top_client_orders['qty'].sum()

"""### <b> Part 2: Data Transformation"""

# Added column that calculates the  subtotal for each line using the unit_price and the qty

df['line_subtotal'] = df['unit_price'] * df['qty']
df.head()

# Added column for shipping price for each order
 # Assumptions:
 # - a shipping price of $7 per poundfor orders over 50 pounds
 # - $10 per pound for items 50 pounds or under.

# Add a column for total weight
df['total_weight'] = df['unit_weight'] * df['qty']

# Add a column for shipping price
df['shipping_price'] = np.where(df['total_weight'] > 50, 7*df['total_weight'], 10*df['total_weight'])
df.head()

# Added column for the total price for each order
 # Assumptions:
 # - a sales tax of 9.25%

df['line_price'] = (df["line_subtotal"] + df['shipping_price']) * 1.0925
df.head()

# Added column for the cost of each line using unit cost, qty, and shipping price
  # Assumptions:
  # - the shipping cost is exactly what is charged to the client


df["line_cost"] = (df["unit_cost"] * df["qty"]) + df["shipping_price"]
df.head()

# Added column for the calculated profit of each line using line cost and line price

df["line_profit"] = df["line_price"] - df["line_cost"]
df.head()

"""### **Part 3: Confirm Your Work**

You have email receipts showing that the total prices for 3 orders. Confirm that your calculations match the receipts. Remember, each order has multiple lines.

Order ID 2742071 had a total price of \$152,811.89

Order ID 2173913 had a total price of \$162,388.71

Order ID 6128929 had a total price of \$923,441.25
"""

# Total Price of Order ID: 2742071

# Isolate the itms with the order id of 2742071
order_2742071 = df[df['order_id'] == 2742071]

# Calculate the sum of the line_prices for the items listed under order 2742071
total_price_2742071 = order_2742071['line_price'].sum()


print(total_price_2742071)

# Total Price of Order ID: 2173913

# Isolate the itms with the order id of 2173913
order_2173913 = df[df['order_id'] == 2173913]

# Calculate the sum of the line_prices for the items listed under order 2173913
total_price_2173913 = order_2173913['line_price'].sum()

print(total_price_2173913)

# Total Price of Order ID: 6128929

# Isolate the itms with the order id of 6128929
order_6128929 = df[df['order_id'] == 6128929]

# Calculate the sum of the line_prices for the items listed under order 6128929
total_price_6128929 = order_6128929['line_price'].sum()

print(total_price_6128929)

"""### <b> Part 4: Summarize and Analyze"""

# Total spent by the he top 5 clients (by quantity)

top_order_totals = []

for client_id in top_five_client_ids:

    # Extract all of the orders placed by the top client
    client = df[df['client_id'] == client_id]

    # Total number of orders placed by the top client
    client_orders_total = client['line_price'].sum()

    # Add the client ID and total to the list
    top_order_totals.append({"client_id": client_id, "client_orders_total": client_orders_total})

print(top_order_totals)

# New DataFrame showing the totals for the for the top 5 clients with the following information:
# - total units purchased,
# - total shipping price,
# - total revenue
# - total profit.
# Sort by total profit.

top_client_summary = pd.DataFrame()

for client_id in top_five_client_ids:
    client_orders = df[df['client_id'] == client_id]
    total_units = client_orders['qty'].sum()
    total_shipping = client_orders['shipping_price'].sum()
    total_revenue = client_orders['line_price'].sum()
    total_profit = client_orders['line_profit'].sum()
    total_cost = client_orders['line_cost'].sum()
    top_client_summary = top_client_summary.append({"client_id": client_id, "qty": total_units, "shipping_price": total_shipping, "line_price": total_revenue, "line_cost": total_cost, "line_profit": total_profit}, ignore_index=True)

top_client_summary = top_client_summary.sort_values(by='line_profit', ascending=False)
top_client_summary

# Format the data: Currency is in millions of dollars.

def format_to_million(number):
    # Convert to millions and round to two decimal places
    number_in_millions = round(number / 1_000_000, 2)

    # Format as a string with a dollar sign and 'M'
    return f"${number_in_millions}M"

top_client_summary['shipping_price'] = top_client_summary['shipping_price'].apply(format_to_million)
top_client_summary['line_price'] = top_client_summary['line_price'].apply(format_to_million)
top_client_summary['line_profit'] = top_client_summary['line_profit'].apply(format_to_million)
top_client_summary['line_cost'] = top_client_summary['line_cost'].apply(format_to_million)


top_client_summary

# Format the data: Rename the columns to names suitable for presentation.

top_client_summary = top_client_summary.rename(columns={"client_id": "Client ID", "qty": "Units", "shipping_price": "Shipping", "line_price": "Total Revenue", "line_cost": "Total Cost", "line_profit": "Total Profit"})

top_client_summary